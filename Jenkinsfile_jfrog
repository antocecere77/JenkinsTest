import groovy.json.JsonSlurperClassic

node {
    jdk = tool name: 'Jdk11'
    env.JAVA_HOME = "${jdk}"
    def server = Artifactory.server('antocecere77.jfrog.io')
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo = Artifactory.newBuildInfo()
    // config
    def to = emailextrecipients([
          [$class: 'CulpritsRecipientProvider'],
          [$class: 'DevelopersRecipientProvider'],
          [$class: 'RequesterRecipientProvider']
    ])

    stage 'Build'
        git url: 'https://github.com/antocecere77/JenkinsTest.git'
        bat "git rev-parse --short HEAD > .git/commit-id"
        commit_id = readFile('.git/commit-id').trim()

    stage 'Artifactory configuration'
        rtMaven.tool = 'maven' // Tool name from Jenkins configuration
        rtMaven.deployer releaseRepo:'libs-release-local', snapshotRepo:'libs-snapshot-local', server: server
        rtMaven.resolver releaseRepo:'libs-release', snapshotRepo:'libs-snapshot', server: server

        stage('Config Build Info') {
            buildInfo.env.capture = true
            buildInfo.env.filter.addInclude("*")
        }
        stage('Exec Maven') {
            rtMaven.run pom: 'pom.xml', goals: 'clean install', buildInfo: buildInfo
        }
        stage('Publish build info') {
            server.publishBuildInfo buildInfo
        }
        stage('docker build/push') {
           docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
              def app = docker.build("antocecere77/spring-hello-world:${commit_id}", '.').push()
           }
        }
        stage('send email') {
            // mark build as failed
            currentBuild.result = "SUCCESS";
            // set variables
            def subject = "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} ${currentBuild.result}"
            def content = '${JELLY_SCRIPT,template="html"}'

            // send email
            if(to != null && !to.isEmpty()) {
              emailext(body: content, mimeType: 'text/html',
                 replyTo: '$DEFAULT_REPLYTO', subject: subject,
                 to: to, attachLog: true )
            }
        }
       stage('send result to slack') {
           def icons = [":unicorn_face:", ":beer:", ":bee:", ":man_dancing:",
               ":party_parrot:", ":ghost:", ":dancer:", ":scream_cat:"]
           def randomIndex = (new Random()).nextInt(icons.size())

           // send slack notification
           slackSend (color: 'good', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) ${icons[randomIndex]}")
       }
       stage('sonar-scanner') {
          def sonarqubeScannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
          withCredentials([string(credentialsId: 'sonar', variable: 'sonarLogin')]) {
             bat "${sonarqubeScannerHome}/bin/sonar-scanner -e -Dsonar.host.url=http://localhost:9000 -Dsonar.login=${sonarLogin} -Dsonar.projectName=gs-gradle -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.projectKey=GS -Dsonar.sources=complete/src/main/ -Dsonar.tests=complete/src/test/ -Dsonar.language=java -Dsonar.java.binaries=."
          }
       }
       stage('call custom api') {
           // example of custom API
           def pr = httpRequest url: "http://localhost:8080/hello-world"
           println(pr)
       }
}
